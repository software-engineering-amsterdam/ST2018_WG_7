module Exercise3

where

import Data.List

import Lecture5
{-
Exercise 3

A Sudoku problem P is minimal if it admits a unique solution, and every problem P' you can get from P by erasing one of the hints admits more than one solution. How can you test whether the problems generated by the code given in the lecture notes are minimal?

Deliverables: testing code, test report, indication of time spent.
-}

--genRandomSudoku

{-
Time spend: 1,5 hours
-}

parents :: Node -> [Node]
parents (s, constraints) = [(extend s ((r,c), 0), deprune s (r,c) constraints) | r <- positions, c <- positions]

deprune :: Sudoku -> (Row,Column) -> [Constraint] -> [Constraint]
deprune s (r,c) constraints = sortBy length3rd ((r,c, (freeAtPos s (r,c))) : constraints)

admitsOneSolution :: Node -> Bool
admitsOneSolution node = (length $  solveNs [node]) == 1

minimalSudoku :: Node -> Bool
minimalSudoku node = all (not . admitsOneSolution) (parents node)

runExercise3 = do
                  putStrLn "-- == Exercise 3 Minimal sudokus == --"
                  putStrLn "Testing 100 sudokus ..."
                  randomSudokus <- sequence [genRandomSudoku | _ <- [0..100]]
                  let result = all minimalSudoku randomSudokus
                  if result == True then putStrLn "+++ OK, Tested 100 sudokus" else putStrLn "--- Failed"
                                

